spring:
  datasource:
    primary: #mysql database config
      driverClassName: com.mysql.cj.jdbc.Driver
      url: jdbc:mysql://localhost:3306/smartinstall?useUnicode=true&characterEncoding=utf-8&serverTimezone=GMT%2B8
      username: root
      password: 1332080218
    secondary: #oracle database config
      driverClassName: oracle.jdbc.OracleDriver
      url: jdbc:oracle:thin:@127.0.0.1:1521:ORCL
      username: scott
      password: tiger
  thymeleaf:
    prefix: classpath:/templates/
    check-template-location: true
    suffix: .html
    encoding: UTF-8
    servlet:
      content-type: text/html
    mode: HTML
    cache: false
  session:
    store-type: redis
  redis:
    database: 1
    host: 127.0.0.1
    port: 6379
    password:
    jedis:
      pool:
        max-idle: 8
        min-idle: 0
        max-active: 8
        max-wait: -1
    timeout: 5000
  kafka:
    bootstrap-servers: 127.0.0.1:9092
    consumer:
      # 自动提交的时间间隔 在spring boot 2.X 版本中这里采用的是值的类型为Duration 需要符合特定的格式，如1S,1M,2H,5D
      #auto-commit-interval: 1S
      # 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理：
      # latest（默认值）在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的记录）
      # earliest ：在偏移量无效的情况下，消费者将从起始位置读取分区的记录
      #auto-offset-reset: earliest
      # 是否自动提交偏移量，默认值是true,为了避免出现重复数据和数据丢失，可以把它设置为false,然后手动提交偏移量
      #enable-auto-commit: false
      group-id: 0 #设置一个默认组
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer #key-value序列化反序列化
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      # 发生错误后，消息重发的次数。
      retries: 0
      # 键的序列化方式
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      # 值的序列化方式
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      # 当有多个消息需要被发送到同一个分区时，生产者会把它们放在同一个批次里。该参数指定了一个批次可以使用的内存大小，按照字节数计算。
      batch-size: 65536
      # 设置生产者内存缓冲区的大小。
      buffer-memory: 524288
      # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。
      # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。
      # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。
      acks: 1
    listener:
      # 在侦听器容器中运行的线程数。
      concurrency: 5
      #listner负责ack，每调用一次，就立即commit
      ack-mode: manual_immediate
      missing-topics-fatal: false
redisson:
  address: redis://127.0.0.1:6379
  password:
  master-name: mymaster
  sentinel-addresses: 127.0.0.1:6379
mybatis:
  mapper-locations: classpath:mapper/mysql/*.xml, classpath:mapper/oracle/*.xml
  config-location: classpath:config/mybatis/mybatis_config.xml
  type-aliases-package: com.xum.demo.pojo.mysql, com.xum.demo.pojo.oracle
zookeeper:
  address: 127.0.0.1:2181
  timeout: 4000
